import{_ as s,c as i,o as a,V as n}from"./chunks/framework.RSw9z9ko.js";const o=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"note/Vue/index.md","filePath":"note/Vue/index.md"}'),t={name:"note/Vue/index.md"},h=n(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>Vue 3 是一个流行的开源<a href="https://so.csdn.net/so/search?q=JavaScript%E6%A1%86%E6%9E%B6&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">JavaScript 框架</a>，用于构建用户界面和单页面应用。它带来了许多新特性和改进，包括更好的性能、更小的打包大小、更好的 TypeScript 支持、全新的组合式 API，以及一些新的内置组件。</p><p><strong>1.Vue 3 的新特性</strong></p><p>Vue 3 引入了许多新特性，包括：</p><ul><li>组合式 API：这是 Vue 3 最重要的新特性之一，它允许更灵活、更逻辑化地组织代码。</li><li>更好的性能：Vue 3 的虚拟 DOM 重写，提供了更快的挂载、修补和渲染速度。</li><li>更小的打包大小：由于新的架构和树摇技术，Vue 3 的打包大小比 Vue 2 小。</li><li>更好的 TypeScript 支持：Vue 3 在内部使用了 TypeScript，因此它为开发者提供了更好的 TypeScript 支持。</li></ul><p><strong>2. 与 Vue 2 的区别</strong></p><p>Vue 3 与 Vue 2 的主要区别包括：</p><ul><li><p>构建：Vue 3 使用 monorepo 架构，更容易管理和维护。</p></li><li><p>API：Vue 3 引入了新的组合式 API，它提供了更灵活的代码组织方式。</p></li><li><p>性能：Vue3 在内部实现上进行了大量的优化，使得渲速度更快，性能更好，内存占用更少。</p><p>例如对<a href="https://so.csdn.net/so/search?q=%E5%93%8D%E5%BA%94%E5%BC%8F&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">响应式</a>的处理以及重写 diff 算法 ；</p></li><li><p>TypeScript：Vue 3 提供了更好的 TypeScript 支持。</p></li><li><p>编码方式：Vue3 引入了 <strong>Composition 组合式 APl</strong>，允许开发者更好地组织和复用逻辑代码，提高代码的可维护性。</p></li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><strong>使用vite构建项目</strong></p><p>【学习指南】学习某一项技能的最好办法是？没错就是看官方文档，官方文档指南：<a href="https://www.vitejs.net/guide/" target="_blank" rel="noreferrer">vite官网</a></p><h3 id="运行创建项目命令" tabindex="-1">运行创建项目命令 <a class="header-anchor" href="#运行创建项目命令" aria-label="Permalink to &quot;运行创建项目命令&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 npm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 yarn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span></span></code></pre></div><h3 id="vue基础语法" tabindex="-1">vue基础语法 <a class="header-anchor" href="#vue基础语法" aria-label="Permalink to &quot;vue基础语法&quot;">​</a></h3><h4 id="_1-文本渲染" tabindex="-1"><strong>1.文本渲染</strong> <a class="header-anchor" href="#_1-文本渲染" aria-label="Permalink to &quot;**1.文本渲染**&quot;">​</a></h4><h5 id="v-text" tabindex="-1">v-text <a class="header-anchor" href="#v-text" aria-label="Permalink to &quot;v-text&quot;">​</a></h5><p>与innertext相似，不会对内部标签进行编译，直接输出</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">全写：&lt;span</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v-text=&quot;msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/spa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">简写：&lt;span&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{msg}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}&lt;/span&gt;</span></span></code></pre></div><h5 id="v-html" tabindex="-1">v-html <a class="header-anchor" href="#v-html" aria-label="Permalink to &quot;v-html&quot;">​</a></h5><p>双大括号的方式会将数据解释为纯文本，而非HTML。为了输出真正的HTML，可以用v-html指令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div v-html=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rawHtml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_2-属性渲染" tabindex="-1">2.属性渲染 <a class="header-anchor" href="#_2-属性渲染" aria-label="Permalink to &quot;2.属性渲染&quot;">​</a></h4><h5 id="v-bind" tabindex="-1"><strong>v-bind</strong> <a class="header-anchor" href="#v-bind" aria-label="Permalink to &quot;**v-bind**&quot;">​</a></h5><p>简写为 <strong>:属性名=&quot;值&quot;</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html部分</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div id=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v-bind:title=&quot;msg&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //全写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :title=&quot;msg&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 简写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_3-条件渲染" tabindex="-1">3.条件渲染 <a class="header-anchor" href="#_3-条件渲染" aria-label="Permalink to &quot;3.条件渲染&quot;">​</a></h4><h5 id="v-if" tabindex="-1">v-if <a class="header-anchor" href="#v-if" aria-label="Permalink to &quot;v-if&quot;">​</a></h5><p>Vue会根据表达式的值的真假条件来渲染元素</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a v-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">显示</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a v-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">不显示</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h5 id="v-else-if" tabindex="-1">v-else-if <a class="header-anchor" href="#v-else-if" aria-label="Permalink to &quot;v-else-if&quot;">​</a></h5><p>顾名思义，充当 <code>v-if</code> 的“else-if 块”，并且可以连续使用，<strong>必须紧跟</strong>在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后，否则它将不会被识别</p><h5 id="v-else" tabindex="-1">v-else <a class="header-anchor" href="#v-else" aria-label="Permalink to &quot;v-else&quot;">​</a></h5><p>v-else是搭配v-if使用的，它必须紧跟在v-if或者v-else-if后面</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;a v-if=&quot;true&quot;&gt;显示&lt;/a&gt;</span></span>
<span class="line"><span>&lt;a v-else&gt;不显示&lt;/a&gt;</span></span>
<span class="line"><span># OR</span></span>
<span class="line"><span>&lt;a v-if=&quot;false&quot;&gt;不显示&lt;/a&gt;</span></span>
<span class="line"><span>&lt;a v-else&gt;显示&lt;/a&gt;</span></span></code></pre></div><h5 id="v-show" tabindex="-1"><strong>v-show</strong> <a class="header-anchor" href="#v-show" aria-label="Permalink to &quot;**v-show**&quot;">​</a></h5><p>与v-if相似，可以控制元素的显示与隐藏；不同点：v-if通过移除Dom节点的方式隐藏，而v-show通过css属性进行隐藏与显示；所以，当需要进行频繁切换隐藏或显示时，推荐用v-show更节约性能，反之推荐使用v-if。</p><h4 id="_4-事件绑定" tabindex="-1"><strong>4.事件绑定</strong> <a class="header-anchor" href="#_4-事件绑定" aria-label="Permalink to &quot;**4.事件绑定**&quot;">​</a></h4><h5 id="v-on指令" tabindex="-1">v-on指令 <a class="header-anchor" href="#v-on指令" aria-label="Permalink to &quot;v-on指令&quot;">​</a></h5><p>主要用来监听dom事件，以便执行一些代码块。表达式可以是一个方法名。 简写为：【 @ 】代码如下（示例）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button @click=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;consoleLog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_5-修饰符" tabindex="-1">5.修饰符 <a class="header-anchor" href="#_5-修饰符" aria-label="Permalink to &quot;5.修饰符&quot;">​</a></h4><h5 id="事件修饰符" tabindex="-1">事件修饰符 <a class="header-anchor" href="#事件修饰符" aria-label="Permalink to &quot;事件修饰符&quot;">​</a></h5><p><strong>.stop（阻止事件冒泡）</strong></p><p>该事件将不再向上冒泡到父元素。这意味着如果一个父元素和子元素都有相同类型的事件监听器，并且点击了子元素，那么只会触发子元素的事件监听器，父元素的事件监听器将被忽略。</p><p><strong>.prevent（阻止事件的默认行为）</strong></p><p>用于事件处理函数中，阻止事件的默认行为。当事件触发时，浏览器会执行默认的操作，例如提交表单、打开链接等。而使用.prevent修饰符可以阻止这些默认的行为。</p><p><strong>.capture（使用事件捕获模式）</strong></p><p>使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</p><p><strong>.self（只当事件在该元素本身（而不是子元素）触发时触发回调函数）</strong></p><p>只当在 event.target 是当前元素自身时触发处理函数</p><p><strong>.once（只触发一次回调函数）</strong></p><p>事件将只会触发一次</p><h5 id="按键修饰符" tabindex="-1">按键修饰符 <a class="header-anchor" href="#按键修饰符" aria-label="Permalink to &quot;按键修饰符&quot;">​</a></h5><p><strong>.enter（按下回车键时触发）</strong></p><p><strong>.tab（按下tab键时触发）</strong></p><p><strong>.delete（按下删除或退格键时触发）</strong></p><p><strong>.esc（按下ESC键时触发）</strong></p><p><strong>.space（按下空格键时触发）</strong></p><p><strong>.up（按下上箭头键时触发）</strong></p><p><strong>.down（按下下箭头键时触发）</strong></p><p><strong>.left（按下左箭头键时触发）</strong></p><h5 id="表单输入修饰符" tabindex="-1">表单输入修饰符 <a class="header-anchor" href="#表单输入修饰符" aria-label="Permalink to &quot;表单输入修饰符&quot;">​</a></h5><p><strong>.lazy（用于将输入事件延迟到change事件之后触发）</strong></p><p><strong>.number（自动将输入值转为数字类型）</strong></p><p><strong>.trim（自动去除输入值两端的空白字符）</strong></p><h5 id="鼠标修饰符" tabindex="-1">鼠标修饰符 <a class="header-anchor" href="#鼠标修饰符" aria-label="Permalink to &quot;鼠标修饰符&quot;">​</a></h5><p><strong>.left（只在鼠标左键点击时触发）</strong></p><p><strong>.right（只在鼠标右键点击时触发）</strong></p><p><strong>.middle（只在鼠标中键点击时触发）</strong></p><p><strong>.passive（指定事件监听器为被动模式，可以提升滚动性能）</strong></p><h3 id="vue3组合式api" tabindex="-1">vue3组合式API <a class="header-anchor" href="#vue3组合式api" aria-label="Permalink to &quot;vue3组合式API&quot;">​</a></h3><h4 id="_1-setup-函数" tabindex="-1">1. setup 函数 <a class="header-anchor" href="#_1-setup-函数" aria-label="Permalink to &quot;1. setup 函数&quot;">​</a></h4><p>在Vue 3中，你可以使用 <code>setup</code> 函数来使用组合式API。<code>setup</code> 函数是组件的入口点，在组件实例被创建和初始化之后，但在渲染发生之前被调用。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 在这里使用组合式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script  setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 在这里使用组合式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_2-响应式编程" tabindex="-1">2. 响应式编程 <a class="header-anchor" href="#_2-响应式编程" aria-label="Permalink to &quot;2. 响应式编程&quot;">​</a></h4><p>你可以在 <code>setup</code> 函数中使用 <code>ref</code> 和 <code>reactive</code> 来创建响应式数据。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script  setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ref,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reactive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: &#39;Vue&#39; })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/script&gt;</span></span></code></pre></div><p>ref和reactive都可以用来处理响应式问题，在设计理念上ref适合处理普通数据类型，reactive适合处理复杂数据类型</p><h4 id="_3-计算属性与监视" tabindex="-1">3.计算属性与监视 <a class="header-anchor" href="#_3-计算属性与监视" aria-label="Permalink to &quot;3.计算属性与监视&quot;">​</a></h4><p>你可以使用 <code>computed</code> 和 <code>watch</code> 来创建计算属性和监视响应式数据的变化。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script  setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ref,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> computed,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 计算属性必须要用returen返回</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		return a.value + b.value</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch((</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) =&gt; a.value,(val) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    //当a变化时候触发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    console.log(val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/script&gt;</span></span></code></pre></div><h4 id="_4-生命周期钩子" tabindex="-1">4.生命周期钩子 <a class="header-anchor" href="#_4-生命周期钩子" aria-label="Permalink to &quot;4.生命周期钩子&quot;">​</a></h4><ol><li>beforeCreate：在实例初始化之后、数据观测(data observer)和event/watcher事件配置之前被调用。</li><li>created：在实例创建完成后被立即调用，此阶段完成了数据观测，但未挂载DOM，$el属性目前不可见。</li><li>beforeMount：在挂载开始之前被调用，相关的render函数首次被调用。</li><li>mounted：实例被挂载后调用，此时el被新创建的vm.$el替换了。</li><li>beforeUpdate：数据更新时调用，发生在虚拟DOM打补丁之前。</li><li>updated：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。</li><li>beforeUnmount：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>unmounted：Vue实例销毁后调用。</li></ol><p>父子组件生命周期顺序</p><p>父beforeCreate =&gt; 父created =&gt; 父beforeMount =&gt; 子beforeCreate =&gt; 子created =&gt;子beforeMount =&gt; 子Mounted=&gt;父Mounted</p><h3 id="vue3高级功能" tabindex="-1">vue3高级功能 <a class="header-anchor" href="#vue3高级功能" aria-label="Permalink to &quot;vue3高级功能&quot;">​</a></h3><h4 id="_1-浅层响应式" tabindex="-1">1. 浅层响应式 <a class="header-anchor" href="#_1-浅层响应式" aria-label="Permalink to &quot;1. 浅层响应式&quot;">​</a></h4><p>在某些情况下，你可能想要创建一个浅层的响应式对象，这样其内部的属性不会被转化为响应式的。这可以通过 <code>shallowReactive</code> 函数来实现。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shallowReactive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shallowReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: 0 })</span></span></code></pre></div><h4 id="_2-只读数据" tabindex="-1">2. 只读数据 <a class="header-anchor" href="#_2-只读数据" aria-label="Permalink to &quot;2. 只读数据&quot;">​</a></h4><p>你可以使用 <code>readonly</code> 函数来创建一个只读的响应式对象。任何试图修改只读对象的操作都将在开发环境下引发一个错误。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readonly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: 0 })</span></span></code></pre></div><h4 id="_3-自定义-ref" tabindex="-1">3. 自定义 Ref <a class="header-anchor" href="#_3-自定义-ref" aria-label="Permalink to &quot;3. 自定义 Ref&quot;">​</a></h4><p>你可以使用 <code>customRef</code> 函数来创建一个自定义的响应式引用。这允许你控制和观察当引用的值发生变化时的行为。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> customRef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> customRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((track</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trigger) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  let value = 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 返回一个包含</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 方法的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 方法用于获取引用的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 调用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> track</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 函数来追踪对引用的读取操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // 返回引用的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      return value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 方法用于设置引用的新值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 将</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 更新为新值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> newValue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 调用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trigger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 函数来触发对引用的更新操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="_4-torefs-和-toref" tabindex="-1">4.toRefs 和 toRef <a class="header-anchor" href="#_4-torefs-和-toref" aria-label="Permalink to &quot;4.toRefs 和 toRef&quot;">​</a></h4><p>toRef 和 toRefs 可以用来复制 reactive 里面的属性然后转成 ref，而且它既保留了响应式，也保留了引用，也就是你从 reactive 复制过来的属性进行修改后，除了视图会更新，原有 ractive 里面对应的值也会跟着更新，如果你知道 浅拷贝 的话那么这个引用就很好理解了，它复制的其实就是引用 + 响应式 ref 不加 s 和 加 s 的区别就是这样：</p><ul><li>toRef: 复制 reactive 里的单个属性并转成 ref</li><li>toRefs: 复制 reactive 里的所有属性并转成 ref</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reactive,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toRefs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Tony&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      greet:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 复制</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 里的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> greet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rGreet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;greet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 更改</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rGreet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> onChangeGreet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      rGreet.value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 复制整个</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rInfo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 更改</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rInfo.greet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> onChangeGreet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      rInfo.greet.value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/script&gt;</span></span></code></pre></div><h3 id="vue3组件通信" tabindex="-1">vue3组件通信 <a class="header-anchor" href="#vue3组件通信" aria-label="Permalink to &quot;vue3组件通信&quot;">​</a></h3><h4 id="_1-父向子通讯" tabindex="-1">1.父向子通讯 <a class="header-anchor" href="#_1-父向子通讯" aria-label="Permalink to &quot;1.父向子通讯&quot;">​</a></h4><p><strong>父组件：</strong></p><p>在父组件中我们可以在使用子组件时，对其传递props数据</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child info=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;父组件&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v-bind:money=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/Child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><strong>子组件：</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> props</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;money&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OR</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> props</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  info:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    required:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //是否规定必须得有</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    default:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;info默认值&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  money:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Number,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    required:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //是否规定必须得有</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    default:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9999</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //默认数据，当父组件没有传递数据时，读取该数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OR</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PropsVo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  info:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  money:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> props</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defineProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PropsV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="_2-子向父通讯" tabindex="-1">2.子向父通讯 <a class="header-anchor" href="#_2-子向父通讯" aria-label="Permalink to &quot;2.子向父通讯&quot;">​</a></h4><p><strong>父组件</strong></p><p>在<strong>父组件</strong>中接收自定义事件</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 绑定自定义事件xxx:实现子组件给父组件传递数据</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Event2 @xxx=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handler3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/Event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//事件回调---4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handler3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (val1, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">val2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  console.log(val1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> val2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>子组件</strong></p><p>主要是<strong>子组件</strong>利用<strong>defineEmits</strong>方法返回函数触发自定义事件</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//利用defineEmits方法返回函数触发自定义事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//defineEmits方法不需要引入直接使用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $emit </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>绑定事件传递参数</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button @click=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handler&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">点击我触发自定义事件xxx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  //按钮点击回调</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  //第一个参数:事件类型</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 第二个</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">三个</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">N参数即为注入数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $emit(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;xxx&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data1&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,115),l=[h];function p(e,k,r,F,d,g){return a(),i("div",null,l)}const y=s(t,[["render",p]]);export{o as __pageData,y as default};
