import{_ as t,c as a,o as e,V as s}from"./chunks/framework.T_R1ZlX5.js";const n="/My-blog/assets/uni-app1.i1ijN5QS.png",p="/My-blog/assets/uni-app2.itIPNfNd.png",d="/My-blog/assets/uni-app3.a78dPgqu.png",r="/My-blog/assets/uni-app4.bRIDe4ED.png",o="/My-blog/assets/uni-app5.hQ8f9FzT.png",i="/My-blog/assets/uni-app6.IiS2NSxX.png",q=JSON.parse('{"title":"uni-app 入门笔记","description":"","frontmatter":{"prev":{"text":"React基础入门","link":"/note/React/"},"next":{"text":"TypeScript基础入门","link":"/note/TypeScript/"}},"headers":[],"relativePath":"note/uni-app/index.md","filePath":"note/uni-app/index.md"}'),l={name:"note/uni-app/index.md"},h=s('<h1 id="uni-app-入门笔记" tabindex="-1">uni-app 入门笔记 <a class="header-anchor" href="#uni-app-入门笔记" aria-label="Permalink to &quot;uni-app 入门笔记&quot;">​</a></h1><p><strong><a href="https://uniapp.dcloud.net.cn/" target="_blank" rel="noreferrer">uni-app</a></strong> 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到 iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。</p><h2 id="uni-app-的优点" tabindex="-1">uni-app 的优点 <a class="header-anchor" href="#uni-app-的优点" aria-label="Permalink to &quot;uni-app 的优点&quot;">​</a></h2><p>（1）跨平台开发，节省了开发成本和时间；</p><p>（2）基于 Vue.js 框架，易于上手和学习；</p><p>（3）插件化的架构，可以灵活地扩展功能；</p><p>（4）支持原生 API 调用，可以满足更多的需求；</p><p>（5）自带一套 UI 组件库，可以快速构建 UI 界面。</p><h2 id="安装与运行" tabindex="-1">安装与运行 <a class="header-anchor" href="#安装与运行" aria-label="Permalink to &quot;安装与运行&quot;">​</a></h2><h3 id="_1-vscode-安装插件" tabindex="-1">1.vscode 安装插件 <a class="header-anchor" href="#_1-vscode-安装插件" aria-label="Permalink to &quot;1.vscode 安装插件&quot;">​</a></h3><p><strong>1.安装“微信小程序开发工具”，“vscode weapp api”，“vscode wxml”，“vscode-wechat”扩展</strong></p><p><img src="'+n+`" alt="uni-app1"></p><h3 id="_2-在终端执行命令创建项目" tabindex="-1">2..在终端执行命令创建项目： <a class="header-anchor" href="#_2-在终端执行命令创建项目" aria-label="Permalink to &quot;2..在终端执行命令创建项目：&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dcloudio/uni-preset-vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uniapp-vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   //选择默认模版即可</span></span></code></pre></div><p>这里的 uniapp-vue 是项目名称，不能大写</p><h3 id="_3-package-json-更改" tabindex="-1">3.package.json 更改 <a class="header-anchor" href="#_3-package-json-更改" aria-label="Permalink to &quot;3.package.json 更改&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 改成</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run dev:mp-weixin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p>改成：&quot;serve&quot;: &quot;npm run dev:mp-weixin&quot;（目的：运行在微信开发者工具中）</p><p>如果不修改&quot;serve&quot;: &quot;npm run dev:h5&quot;，那就可以直接运行（执行指令：npm run serve）在 h5 网页端出现 successfully 代表在网页端运行成功了</p><p><strong>更改之后执行 npm run serve</strong></p><p>运行成功后会生成 dist 文件夹 里面有个 mp-weixin 文件用于绑定微信开发者工具</p><p><img src="`+p+'" alt="uni-app2"></p><h3 id="_4-微信开发者工具导入项目" tabindex="-1">4.微信开发者工具导入项目 <a class="header-anchor" href="#_4-微信开发者工具导入项目" aria-label="Permalink to &quot;4.微信开发者工具导入项目&quot;">​</a></h3><p><strong>若没有这个应用，请先安装这个应用 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noreferrer">点击安装</a></strong></p><p><img src="'+d+'" alt="uni-app3"></p><p><strong>找到项目下的 mp-weixin，选择文件夹，如果没有 appid 选择测试号就行</strong></p><p><img src="'+r+'" alt="uni-app4"></p><p><strong>然后就运行成功了：</strong></p><p><img src="'+o+'" alt="uni-app5"></p><p>运行如下，注意！！运行成功后在 vscode 别关闭项目，代码就在 vscode 里面写就行，写完保存代码，微信开发者工具也会自动更改</p><h2 id="uniapp-项目目录结构" tabindex="-1">uniapp 项目目录结构 <a class="header-anchor" href="#uniapp-项目目录结构" aria-label="Permalink to &quot;uniapp 项目目录结构&quot;">​</a></h2><p><img src="'+i+'" alt="uni-app6"></p><p>提示</p><ul><li><code>static</code>下目录的 js 文件不会被 webpack 编译，里面如果有 es6 的代码，不经过转换直接运行，在手机设备上会报错。</li><li>所以<code>less、scss</code>等资源同样不要放在 <code>static</code>目录下，建议这些公共的资源放在<code>common</code>目录下</li></ul><p><strong>应用配置 manifest.json</strong></p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等，我们也可以在这里为 Vue 为 H5 设置跨域拦截处理器</p><p><strong>编译配置 vue.config.js</strong></p><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的根目录中存在这个文件，那么它会被自动加载，一般用于配置 webpack 等编译选项。<a href="https://uniapp.dcloud.io/collocation/vue-config" target="_blank" rel="noreferrer">官方文档</a></p><p><strong>全局配置 page.json</strong></p><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生 tabbar 等。它类似微信小程序中<code>app.json</code>的<strong>页面管理</strong>部分。<a href="https://uniapp.dcloud.io/collocation/pages" target="_blank" rel="noreferrer">官方文档</a></p><p><strong>全局样式 uni.scss</strong></p><p>uni.scss 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss 文件里预置了一批 scss 变量预置。官方文档</p><p>uni-app 官方扩展插件（uni ui）及 插件市场 上很多三方插件均使用了这些样式变量，如果你是插件开发者，建议你使用 scss 预处理，并在插件代码中直接使用这些变量（无需 import 这个文件），方便用户通过搭积木的方式开发整体风格一致的 App。</p><p>uni.scss 是一个特殊文件，在代码中无需 import 这个文件即可在 scss 代码中使用这里的样式变量。uni-app 的编译器在 webpack 配置中特殊处理了这个 uni.scss，使得每个 scss 文件都被注入这个 uni.scss，达到全局可用的效果。如果开发者想要 less、stylus 的全局使用，需要在 vue.config.js 中自行配置 webpack 策略。</p><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>Uniapp 作为一款跨平台应用开发框架，具有丰富的生命周期，以下是 Uniapp 的生命周期：</p><p><strong>1.应用生命周期</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当 uni-app 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 uni-app 启动，或从后台进入前台显示（显示页面的时候触发）。</td></tr><tr><td>onHide</td><td>当 uni-app 从前台进入后台（隐藏/退出页面的时候触发）</td></tr><tr><td>onError</td><td>当 uni-app 报错时触发</td></tr><tr><td>onThemeChange</td><td>监听系统主题变化</td></tr><tr><td>onUniNViewMessage</td><td>对 nvue 页面发送的数据进行监听</td></tr><tr><td>onUnhandledRejection</td><td>对未处理的 Promise 拒绝事件监听函数</td></tr><tr><td>onPageNotFound</td><td>页面不存在监听函数</td></tr></tbody></table><p><strong>2.页面生命周期</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>onInit</td><td>监听页面初始化，其参数同 onLoad 参数，触发时机早于 onLoad</td></tr><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）</td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回当前页面</td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td>onHide</td><td>生命周期回调—监听页面隐藏</td></tr><tr><td>onUnload</td><td>生命周期回调—监听页面卸载</td></tr><tr><td>onPullDownRefresh</td><td>监听用户下拉动作，一般用于下拉刷新</td></tr><tr><td>onReachBottom</td><td>页面滚动到底部的事件（不是 scroll-view 滚到底），常用于下拉下一页数据</td></tr><tr><td>onShareAppMessage</td><td>用户点击右上角转发</td></tr><tr><td>onShareTimeline</td><td>用户点击右上角转发到朋友圈</td></tr><tr><td>onAddToFavorites</td><td>用户点击右上角收藏</td></tr><tr><td>onPageScroll</td><td>页面滚动触发事件的处理函数</td></tr><tr><td>onResize</td><td>页面尺寸改变时触发，详见 响应显示区域变化</td></tr><tr><td>onNavigationBarButtonTap</td><td>监听原生标题栏按钮点击事件，参数为 Object</td></tr><tr><td>onBackPress</td><td>监听页面返回</td></tr><tr><td>onNavigationBarSearchInputChanged</td><td>监听原生标题栏搜索输入框输入内容变化事件</td></tr><tr><td>onNavigationBarSearchInputConfirmed</td><td>监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发</td></tr><tr><td>onNavigationBarSearchInputClicked</td><td>监听原生标题栏搜索输入框点击事件（pages.json 中的 searchInput 配置 disabled 为 true 时才会触发）</td></tr></tbody></table><p><strong>3.组件生命周期</strong></p><p>跟 vue 的生命周期一样</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后被调用</td></tr><tr><td>created</td><td>在实例创建完成后被立即调用</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用</td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用</td></tr><tr><td>updated</td><td>数据更新之后时调用</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用</td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</td></tr></tbody></table><h2 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">​</a></h2><p>官网写的太好了懒得整理了 <a href="https://uniapp.dcloud.net.cn/component/view.html" target="_blank" rel="noreferrer">点击进入官网</a></p>',55),c=[h];function u(g,k,b,m,_,v){return e(),a("div",null,c)}const y=t(l,[["render",u]]);export{q as __pageData,y as default};
